!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
CPPFLAGS	./Makefile	/^CPPFLAGS := $(CPP_FLAGS) $(INCLUDE_DIRS) $(MACROS)$/;"	m
CPP_FLAGS	./Makefile	/^CPP_FLAGS= -Wall -O3 -g $/;"	m
CXX	./Makefile	/^CXX=g++$/;"	m
EPOLL_ACCEPTER_H_	../share/net/epoll_accepter.h	2;"	d
EPOLL_HANDLER_H_	../share/net/epoll_handler.h	2;"	d
EPOLL_WORKER_H_	../share/net/epoll_worker.h	2;"	d
INCLUDE_DIRS	./Makefile	/^INCLUDE_DIRS = -I.\/ -I..\/share\/net  -I..\/share\/common  -I..\/share\/thread$/;"	m
LIB	./Makefile	/^LIB=-lpthread$/;"	m
LOCK_H_	../share/thread/lock.h	2;"	d
MACROS	./Makefile	/^MACROS =$/;"	m
OBJS	./Makefile	/^OBJS := $(patsubst %.cpp,%.o,$(SRCS))$/;"	m
SINGLETON_H_	../share/common/singleton.h	2;"	d
SOCK_H_	../share/net/sock.h	2;"	d
SRCS	./Makefile	/^SRCS := $(wildcard *.cpp $(SRCDIR)\/*.cpp)$/;"	m
TARGET	./Makefile	/^TARGET=test$/;"	m
TEST_HANDLER_H_	./test_handler.h	2;"	d
THREAD_MUTEX_GUARD_H_	../share/thread/thread_mutex_guard.h	2;"	d
THREAD_MUTEX_LOCK_H_	../share/thread/thread_mutex_lock.h	2;"	d
UNUSED_ARG	../share/common/unused_arg.h	5;"	d
UNUSED_ARG_H_	../share/common/unused_arg.h	2;"	d
VPATH	./Makefile	/^VPATH = ..\/share\/$/;"	m
accept_thread	../share/net/epoll_accepter.cpp	/^void* epoll_accepter<handler>::accept_thread(void *arg)$/;"	f	class:epoll_accepter
accept_thread_id_	../share/net/epoll_accepter.h	/^  pthread_t accept_thread_id_;$/;"	m	class:epoll_accepter
acceptor_stop_	../share/net/epoll_accepter.h	/^  bool acceptor_stop_;$/;"	m	class:epoll_accepter
acquire	../share/thread/thread_mutex_guard.h	/^	void acquire()$/;"	f	class:thread_mutex_guard
acquire	../share/thread/thread_mutex_lock.h	/^	virtual int acquire()$/;"	f	class:thread_mutex_lock
dispatch	../share/net/epoll_accepter.cpp	/^int epoll_accepter<handler>::dispatch(int sock, handler *hd)$/;"	f	class:epoll_accepter
dispatch	../share/net/epoll_worker.cpp	/^int epoll_worker::dispatch(const int sock, epoll_handler *hd)$/;"	f	class:epoll_worker
edge_trigger_	../share/net/epoll_worker.h	/^  bool edge_trigger_;$/;"	m	class:epoll_worker
epoll_accepter	../share/net/epoll_accepter.cpp	/^epoll_accepter<handler>::epoll_accepter():$/;"	f	class:epoll_accepter
epoll_accepter	../share/net/epoll_accepter.h	/^class epoll_accepter$/;"	c
epoll_fd_	../share/net/epoll_worker.h	/^  int epoll_fd_;$/;"	m	class:epoll_worker
epoll_handler	../share/net/epoll_handler.h	/^	epoll_handler():$/;"	f	class:epoll_handler
epoll_handler	../share/net/epoll_handler.h	/^	epoll_handler(int sock, struct sockaddr_in* remote_addr)$/;"	f	class:epoll_handler
epoll_handler	../share/net/epoll_handler.h	/^class epoll_handler$/;"	c
epoll_worker	../share/net/epoll_worker.cpp	/^epoll_worker::epoll_worker(bool edge_trigger):$/;"	f	class:epoll_worker
epoll_worker	../share/net/epoll_worker.h	/^class epoll_worker$/;"	c
events_	../share/net/epoll_worker.h	/^  struct epoll_event *events_;$/;"	m	class:epoll_worker	typeref:struct:epoll_worker::epoll_event
get_max_events	../share/net/epoll_worker.cpp	/^int epoll_worker::get_max_events()$/;"	f	class:epoll_worker
handle_close	../share/net/epoll_handler.h	/^	virtual int handle_close()$/;"	f	class:epoll_handler
handle_err	../share/net/epoll_handler.h	/^	virtual int handle_err()$/;"	f	class:epoll_handler
handle_input	../share/net/epoll_handler.h	/^	virtual int handle_input()$/;"	f	class:epoll_handler
handle_input	./test_handler.h	/^	virtual int handle_input()$/;"	f	class:test_handler
handle_open	../share/net/epoll_handler.h	/^	virtual int handle_open(void *arg)$/;"	f	class:epoll_handler
handle_output	../share/net/epoll_handler.h	/^	virtual int handle_output()$/;"	f	class:epoll_handler
handle_output	./test_handler.h	/^	virtual int handle_output()$/;"	f	class:test_handler
handle_run	../share/net/epoll_handler.h	/^	virtual int handle_run()$/;"	f	class:epoll_handler
handle_shutdown	../share/net/epoll_handler.h	/^	virtual int handle_shutdown()$/;"	f	class:epoll_handler
handle_timeout	../share/net/epoll_handler.h	/^	virtual int handle_timeout()$/;"	f	class:epoll_handler
handlers_	../share/net/epoll_worker.h	/^  std::map<int, epoll_handler*>  handlers_;$/;"	m	class:epoll_worker
hd_num_	../share/net/epoll_accepter.h	/^  int hd_num_;$/;"	m	class:epoll_accepter
instance	../share/common/singleton.h	/^public: static type* instance() { if (instance_ == NULL)$/;"	f	class:singleton
instance_	../share/common/singleton.h	/^	static type *instance_;$/;"	m	class:singleton
ip	../share/net/epoll_handler.h	/^	inline  void ip(unsigned int ip)$/;"	f	class:epoll_handler
ip	../share/net/epoll_handler.h	/^	inline unsigned int ip()$/;"	f	class:epoll_handler
ip_	../share/net/epoll_handler.h	/^	unsigned int ip_;$/;"	m	class:epoll_handler
listen_port_	../share/net/epoll_accepter.h	/^  unsigned short listen_port_;$/;"	m	class:epoll_accepter
listen_sock_	../share/net/epoll_accepter.h	/^  int listen_sock_;$/;"	m	class:epoll_accepter
local_ip_	../share/net/epoll_accepter.h	/^  unsigned int local_ip_;$/;"	m	class:epoll_accepter
lock	../share/thread/lock.h	/^class lock$/;"	c
lock_	../share/thread/thread_mutex_guard.h	/^	thread_mutex *lock_;$/;"	m	class:thread_mutex_guard
main	./test_accept_main.cpp	/^int main()$/;"	f
max_events_	../share/net/epoll_worker.h	/^  int max_events_;$/;"	m	class:epoll_worker
mutex_	../share/thread/thread_mutex_lock.h	/^	pthread_mutex_t  mutex_;$/;"	m	class:thread_mutex_lock
owner_	../share/thread/thread_mutex_guard.h	/^	bool owner_;$/;"	m	class:thread_mutex_guard
port	../share/net/epoll_handler.h	/^	inline  void port(unsigned short port)$/;"	f	class:epoll_handler
port	../share/net/epoll_handler.h	/^	inline unsigned int port()$/;"	f	class:epoll_handler
port_	../share/net/epoll_handler.h	/^	unsigned short port_;$/;"	m	class:epoll_handler
recv	../share/net/epoll_handler.h	/^	ssize_t recv(char *buf, size_t length, int flags)$/;"	f	class:epoll_handler
release	../share/thread/thread_mutex_guard.h	/^	void release()$/;"	f	class:thread_mutex_guard
release	../share/thread/thread_mutex_lock.h	/^	virtual int release()$/;"	f	class:thread_mutex_lock
remove	../share/net/epoll_worker.cpp	/^void epoll_worker::remove(const int sock)$/;"	f	class:epoll_worker
run_handlers	../share/net/epoll_worker.cpp	/^void epoll_worker::run_handlers()$/;"	f	class:epoll_worker
rwlock_	../share/net/epoll_worker.h	/^  pthread_rwlock_t rwlock_;$/;"	m	class:epoll_worker
send	../share/net/epoll_handler.h	/^	ssize_t send(const void *buf, size_t length, int flags)$/;"	f	class:epoll_handler
set_noblock	../share/net/sock.h	/^  static int set_noblock(const int sockfd)$/;"	f	class:sock
set_sockfd_reuseable	../share/net/sock.h	/^  static int set_sockfd_reuseable(const int sockfd)$/;"	f	class:sock
singleton	../share/common/singleton.h	/^class singleton$/;"	c
singleton_lock_	../share/common/singleton.h	/^	static thread_mutex_lock singleton_lock_;$/;"	m	class:singleton
sock	../share/net/epoll_handler.h	/^	inline int sock()$/;"	f	class:epoll_handler
sock	../share/net/epoll_handler.h	/^	inline void sock(int sk)$/;"	f	class:epoll_handler
sock	../share/net/sock.h	/^class sock$/;"	c
sock_	../share/net/epoll_handler.h	/^	int sock_;$/;"	m	class:epoll_handler
start	../share/net/epoll_accepter.cpp	/^int epoll_accepter<handler>::start(unsigned int ip,$/;"	f	class:epoll_accepter
start	../share/net/epoll_accepter.cpp	/^int epoll_accepter<handler>::start(unsigned short port,$/;"	f	class:epoll_accepter
start	../share/net/epoll_worker.cpp	/^int epoll_worker::start()$/;"	f	class:epoll_worker
stop	../share/net/epoll_accepter.cpp	/^int epoll_accepter<handler>::stop()$/;"	f	class:epoll_accepter
stop	../share/net/epoll_worker.cpp	/^int epoll_worker::stop(void)$/;"	f	class:epoll_worker
test_handler	./test_handler.h	/^	test_handler(int sock_fd, struct sockaddr_in *remote_addr)$/;"	f	class:test_handler
test_handler	./test_handler.h	/^class test_handler : public epoll_handler$/;"	c
thread_mutex_guard	../share/thread/thread_mutex_guard.h	/^	thread_mutex_guard(thread_mutex &lock)$/;"	f	class:thread_mutex_guard
thread_mutex_guard	../share/thread/thread_mutex_guard.h	/^class thread_mutex_guard$/;"	c
thread_mutex_lock	../share/thread/thread_mutex_lock.h	/^	thread_mutex_lock()$/;"	f	class:thread_mutex_lock
thread_mutex_lock	../share/thread/thread_mutex_lock.h	/^class thread_mutex_lock : public lock$/;"	c
thread_worker_id_	../share/net/epoll_worker.h	/^  pthread_t thread_worker_id_;$/;"	m	class:epoll_worker
timer_tm_	../share/net/epoll_handler.h	/^	time_t timer_tm_;$/;"	m	class:epoll_handler
userarg_	../share/net/epoll_handler.h	/^	void *userarg_;$/;"	m	class:epoll_handler
work_stop_	../share/net/epoll_worker.h	/^  bool work_stop_;$/;"	m	class:epoll_worker
work_thread	../share/net/epoll_worker.cpp	/^void* epoll_worker::work_thread(void *arg)$/;"	f	class:epoll_worker
worker_num_	../share/net/epoll_accepter.h	/^  int worker_num_;$/;"	m	class:epoll_accepter
workers_	../share/net/epoll_accepter.h	/^  vector<epoll_worker *> workers_;$/;"	m	class:epoll_accepter
~epoll_accepter	../share/net/epoll_accepter.cpp	/^epoll_accepter<handler>::~epoll_accepter()$/;"	f	class:epoll_accepter
~epoll_handler	../share/net/epoll_handler.h	/^	virtual ~epoll_handler()$/;"	f	class:epoll_handler
~epoll_worker	../share/net/epoll_worker.cpp	/^epoll_worker::~epoll_worker()$/;"	f	class:epoll_worker
~thread_mutex	../share/thread/thread_mutex_guard.h	/^	~thread_mutex()$/;"	f	class:thread_mutex_guard
